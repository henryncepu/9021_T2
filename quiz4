# Author: henry_wang

import sys
import re
import unittest
# checks if arity is 0 and calls to other functions
def is_valid(word, arity):
    # arity of 0
    if arity == 0:
        if zero_arity(word):
            # print(zero_arity(word),'h')
            return True
        else:
            return False
    if no_syntax_errors(word) and no_arity_errors(word, arity):
        return True
    else:
        return False
# arity of 0
def zero_arity(word):
    temp= word.strip()
    pattern = re.compile('\s*[a-zA-Z_]+\s*')
    if pattern.match(temp) or temp == "" :
        if  any(i.isdigit()  for i in temp):
            return False
        elif temp.count('(')!=0 or temp.count(')')!=0:
            return False

        elif ''.join(temp.split())!=temp:
            return False
        else:
            return True
    else:
        return False


# checks syntax of arguements
def no_syntax_errors(word):
    # pattern=re.compile('\s*\w+\s*')  #0 or more spaces followed by characters or underscores followed by 0 or more spaces
    pattern = re.compile('\s*[a-zA-Z_)]+\s*')
    found_this = re.split('\,|\(', word)  # split on either , ( )
    for part in found_this:
        if not (pattern.match(part)):  # with a whitespace or something
            return False
    return True


# decoupled logic of arity errors (hopefully decoupled)
def no_arity_errors(word, arity):
    number_of_open = word.count('(')
    number_of_closed = word.count(')')
    number_of_commas = word.count(',')
    if (number_of_closed != number_of_open):
        return False
    # no brackets
    if number_of_open == 0:
        return False
    Cn = number_of_commas / number_of_open
    Bn = number_of_open / number_of_closed
    #Bn = 1  # number_of_open/number_of_open
    # print(number_of_open)
    if Cn + Bn == arity:
        # if
        return True
    else:
        return False

# where the func is at
try:
    arity = int(input('Input an arity : '))
    if arity < 0:
        raise ValueError
except ValueError:
    print('Incorrect arity, giving up...')
    sys.exit()
word = input('Input a word: ')
if is_valid(word, arity):
    print('The word is valid.')
else:
    print('The word is invalid.')



